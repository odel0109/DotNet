using StoreApp.Abstract.EF;
using System.Data.Entity;
using System.Data.Entity.ModelConfiguration;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using StoreApp.Abstract.Interfaces;
using StoreApp.Abstract.Extensions;

namespace StoreApp.ProductData.EF
{
    public class ProductDataContext : EFAbstractDataContext<Product>, IRepository<Category>
    {
        public ProductDataContext() : base()
        { }

        public ProductDataContext(string connectionString): base(connectionString)
        { }

        #region Configuration
        protected override EntityTypeConfiguration<Product> ConfigureMainType(DbModelBuilder modelBuilder)
        {
            ConfigureCategoryType(modelBuilder);

            ConfigureImageType(modelBuilder);

            return ConfigureProductType(modelBuilder);
        }

        protected virtual EntityTypeConfiguration<Category> ConfigureCategoryType(DbModelBuilder modelBuilder)
        {
            var entity = modelBuilder.Entity<Category>();

            entity.ToTable("Category");
            entity.HasKey(p => new { p.CategoryID });

            entity.Property(c => c.CategoryID).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity).IsRequired();

            entity.Property(c => c.DefaultName).IsRequired().IsUnicode(true).HasMaxLength(64);

            entity.Property(c => c.NameMessageID).IsRequired();

            entity.HasMany(c => c.Products).WithRequired(p => p.Category);

            return entity;
        }

        protected virtual EntityTypeConfiguration<ProductImage> ConfigureImageType(DbModelBuilder modelBuilder)
        {
            var entity = modelBuilder.Entity<ProductImage>();

            entity.ToTable("ProductImages");
            entity.HasKey(p => new { p.ProductID, p.SequenceNumber });

            entity.HasRequired(p => p.Product);

            entity.Property(i => i.ImageData).IsRequired();

            entity.Property(i => i.ImageMimeType).IsRequired();

            entity.Property(i => i.SequenceNumber).IsRequired();

            return entity;
        }

        protected virtual EntityTypeConfiguration<Product> ConfigureProductType(DbModelBuilder modelBuilder)
        {
            var entity = modelBuilder.Entity<Product>();

            entity.ToTable("Product");
            entity.HasKey(p => new { p.ProductID });

            entity.HasMany(p => p.ProductImages).WithRequired(d => d.Product);

            //ProductID will be generated by server and is requred
            entity.Property(p => p.ProductID).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity).IsRequired();

            //required
            entity.Property(p => p.ActiveFlag).IsRequired();

            //default name should be in unicode format, required and has max lenght
            entity.Property(p => p.DefaultName).IsUnicode(true).HasMaxLength(64).IsRequired();

            //description must exist
            entity.Property(p => p.DescriptionMessageID).IsRequired();

            //message must exist
            entity.Property(p => p.NameMessageID).IsRequired();

            //price is required and has precision 10,2
            entity.Property(p => p.Price).IsRequired().HasPrecision(10, 2);

            entity.HasRequired(p => p.Category);

            return entity;
        }

        #endregion

        #region IRepository<Category> implementation

        public void Add(Category entity)
        {
            Add<Category>(entity);
        }

        public void Update(Category entity, Category newEntity)
        {
            Update<Category>(entity, newEntity);
        }

        public void Delete(Category entity)
        {
            Delete<Category>(entity);
        }

        public IQueryable<Category> Read(QueryParameterSet<Category> queryParameters)
        {
            return Read<Category>(queryParameters);
        }

        IQueryable<Category> IReadonlyRepository<Category>.ReadAll()
        {
            return Read<Category>(null);
        }

        Category IReadonlyRepository<Category>.Find(params object[] primaryKey)
        {
            return Find<Category>(primaryKey);
        }

        #endregion
    }
}
